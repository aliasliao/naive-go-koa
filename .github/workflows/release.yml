name: Release

on:
  release:
    type: created

env:
  GOPATH: ${{ github.workspace }}
  GOBIN: ${{ github.workspace }}/bin
  APP: src/github.com/${{ github.repository }}
  PROTOC: 3.13.0

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-18.04
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14

      - name: Install protoc
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC }}/protoc-${{ env.PROTOC }}-linux-x86_64.zip
          unzip *.zip -d ./tmp
          cp -r ./tmp/include/* ${{ env.GOPATH }}/src
          cp ./tmp/bin/* ${{ env.GOBIN }}
          rm -f *.zip
          rm -rf ./tmp
          go get -v google.golang.org/protobuf/cmd/protoc-gen-go


      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          path: ${{ env.APP }}

      - name: Generate proto
        working-directory: ${{ github.workspace }}/${{ env.APP }}
        run: protoc --proto_path=.  --go_out=. ./model/*.proto

      - name: Build
        working-directory: ${{ github.workspace }}/${{ env.APP }}
        run: |
          go build -i -o httpd_linux_x86 github.com/${{ github.repository }}
          GOOS=linux GOARCH=arm GOARM=5 go build -i -o httpd_linux_arm5 github.com/${{ github.repository }}
          GOOS=linux GOARCH=arm GOARM=7 go build -i -o httpd_linux_arm7 github.com/${{ github.repository }}
          GOOS=windows GOARCH=amd64 go build -i -o httpd_win_amd64.exe github.com/${{ github.repository }}
          ls -alh
          tar -cvf build_all.tar httpd*
          ls -alh

      - name: Upload Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.APP }}/build_all.tar
          asset_name: httpd.tar
          asset_content_type: application/octet-stream
